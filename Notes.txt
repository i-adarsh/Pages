Use of Java 8
1. Concise and Minimal Code
2. Benefits of functional programming but still Java is OOP language not Functional Programing language
3. To enable parallel programming, more compatible code for multi core processors

Features of Java 8

1. Lambda Expressions:
Anonymous functions w/o any name and no need to define
(x,y) -> x+y;

2. Stream API
Stream API for bulk data operations on collections. like list and arrat

3. Date and Time API
Under the package java.time Java 8 offers a new date-time API

4. Base64 Encode Decode
For Base64 encoding, Java8 has built-in encode and decode functions. -> java.util.Base64.

5. Method and Constructor reference
:: operator

6. default and static methods came inside interface

7. Functional Interface @FunctionalInterface
SAM -> Single Abstract Method 

8. Optional Class, Java I/O operations and Collections API Improvements

# =================================================

Q. What is lambda expression?

Lambda expression is an anonymous function, i.e. 
not having any name
not having any return type 
and not having modifiers (public, private, default)

Steps to make any function lambda expression
1. remove modifier
2. remove return type
3. remove method name
4. place arrow

ex1:
private int getDtringLength(String str) {
    return str.length();
}

(String str) -> {return str.length();}

(str) -> str.length();

ex2:
private void add(int a, int b) {
    System.out.println(a+b);
}
(int a, int b) -> {System.out.println(a+b);}
(a,b) -> System.out.println(a+b);

# =================================================

Benefits of Lambda Expression:

1. To enable functional programming in Java
2. To make code more readable, maintainable and Concise
3. To enable parallel programming
4. JAR file size reduction
5. Elimination of shadow variables

# =================================================

# Functional Interface:
public abstract methods are only allowed in interface. but after jaav 8 default and static somes inside interface

@FunctionalInterface
The interface who contains only one abstract method but can have multiple default and static method is called functional interface;

ex: Runnable    => run()
    Callable    => call()
    Comparable  => compareTo()
    Comparator  => compare()

What is the advantage of this annotation?
It restrict the interface to be a Functional Interface.
So if people have already used some lambda expression and some new team member added another abstract method in the Interface
all lambda expression will have errors.

# Inheritance in Functional Interface:

public interface Parent {
    public void sayHello();
}

If its empty, then also its an FI.
If we only define the Parent abstract method then also it is FI.

public interface Child extends Parent {
    public void sayHello();
    default void sayBye() {}
    static void sayTest() {}
}

@FunctionalInterface
public interface MyFunctionalInterface {
    void m1();
    default void m2() {
        System.out.println("Default Method - 2");
    }
    default void m3() {
        System.out.println("Default Method - 3");
    }
    default void m4() {
        System.out.println("Default Method - 4");
    }
}


Traditional Approach, first we have to override the abstract method and then only we can call that method:

interface Calculator {
    void switchOn();
}
public class CalculatorImpl implements Calculator {
    @Override
    public void switchOn() {
        System.out.println("Switch On");
    }
    public static void main(String[] args) {
        Calculator calculator = new CalculatorImpl();
        calculator.switchOn();
    }
}

Syntax of Lambda Functions: () -> {}

Now how we're using it, even if it's a single line of statement we don't have to give the curly braces as well:

@FunctionalInterface
interface Calculator {
    void switchOn();
}
public class CalculatorImpl {
    public static void main(String[] args) {
        Calculator calculator = () -> {
            System.out.println("Switch On");
        };
        calculator.switchOn();
    }
}

Without braces:

@FunctionalInterface
interface Calculator {
    void switchOn();
}
public class CalculatorImpl {
    public static void main(String[] args) {
        Calculator calculator = () -> System.out.println("Switch On");
        calculator.switchOn();
    }
}

Single Parameter/Arguments

@FunctionalInterface
interface Calculator {
    void add(int num1);
}
public class CalculatorImpl {
    public static void main(String[] args) {
        Calculator calculator = (input) -> System.out.println("Sum: " + input);
        calculator.add(24);
    }
}

Multiple Parameter/Arguments

@FunctionalInterface
interface Calculator {
    void subtract(int num1, int num2);
}
public class CalculatorImpl {
    public static void main(String[] args) {
        Calculator calculator = (num1 , num2) -> System.out.println("Subtract: " + (num1 - num2));
        calculator.subtract(46, 38);
    }
}

With some custom logic

@FunctionalInterface
interface Calculator {
    int subtract(int num1, int num2);
}
public class CalculatorImpl {
    public static void main(String[] args) {
        Calculator calculator = (num1 , num2) ->  {
            if (num1 > num2) {
                return num1 - num2;
            } else {
                throw new RuntimeException("Please make num1 greater");
            }
        };
        System.out.println("Subtract: " + calculator.subtract(46, 38));
    }
}

Realworld examples:

Book.java

package lambda.bookExample;

public class Book {
    private int id;

    public Book(int id, String name, int pages) {
        this.id = id;
        this.name = name;
        this.pages = pages;
    }

    private String name;

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", pages=" + pages +
                '}';
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPages() {
        return pages;
    }

    public void setPages(int pages) {
        this.pages = pages;
    }

    private int pages;
}

# ===================

BookDAO.java

package lambda.bookExample;

import java.util.ArrayList;
import java.util.List;

public class BookDAO {
    public List<Book> getBooks() {
        List<Book> books = new ArrayList<>();
        books.add(new Book(101, "Core Java", 400));
        books.add(new Book(102, "Hibernate", 131));
        books.add(new Book(103, "Spring", 124));
        books.add(new Book(104, "Spring Boot", 242));
        books.add(new Book(105, "Docker", 532));
        return books;
    }
}

# ===================

package lambda.bookExample;

import java.util.Comparator;
import java.util.List;

public class BookService {
    public List<Book> getBooksInSortedOrder(){
        List<Book> books = new BookDAO().getBooks();
        books.sort(new MyComparator());
        return books;
    }

    public static void main(String[] args) {
        System.out.println(new BookService().getBooksInSortedOrder());
    }
}

class MyComparator implements Comparator<Book>{
    @Override
    public int compare(Book o1, Book o2) {
        return o2.getName().compareTo(o1.getName());
    }
}


# ===================

import java.util.Comparator;
import java.util.List;

public class BookService {
    public List<Book> getBooksInSortedOrder(){
        List<Book> books = new BookDAO().getBooks();
        books.sort(new Comparator<Book>() {
            @Override
            public int compare(Book o1, Book o2) {
                return o2.getName().compareTo(o1.getName());
            }
        });
        return books;
    }

    public static void main(String[] args) {
        System.out.println(new BookService().getBooksInSortedOrder());
    }
}

# ===================

public class BookService {
    public List<Book> getBooksInSortedOrder(){
        List<Book> books = new BookDAO().getBooks();
        books.sort((book1, book2) -> book1.getName().compareTo(book2.getName()));
        return books;
    }

    public static void main(String[] args) {
        System.out.println(new BookService().getBooksInSortedOrder());
    }
}

# ===================

public class BookService {
    public List<Book> getBooksInSortedOrder(){
        List<Book> books = new BookDAO().getBooks();
        books.sort(Comparator.comparing(Book::getName));
        return books;
    }

    public static void main(String[] args) {
        System.out.println(new BookService().getBooksInSortedOrder());
    }
}

# ===================

Java 8 - Consumer, Predicate, Supplier examples

Consumer Functional Interface

Consumer<T> is an in-built functional interface introduced in Java 8.
Consumer can be used in all contexts where an object needs to be consumed i.e. taken as inout, and some operations is to be performed on the object without returning any result

void accept(T t);

Predicate Functional Interface

This Functional Interface used for conditional check where you think, we can use these true/false returning functions in day to day programming we should choose Predicate

boolean test(T t);

Supplier Functional Interface

Supplier can be used in all contexts where there is no input but an output is expected.

T get();

Consumer Functional Interface

public class ConsumerDemo implements Consumer<Integer> {
    @Override
    public void accept(Integer integer) {
        System.out.println("Printing: " + integer);
    }

    public static void main(String[] args) {
        
    }
}


public class ConsumerDemo{
    public static void main(String[] args) {
       Consumer<Integer> consumer = (t) -> {
            System.out.println("Printing: " + t);
       };
       consumer.accept(10);
    }
}


public class ConsumerDemo{
    public static void main(String[] args) {
       Consumer<Integer> consumer = (t) -> {
            System.out.println("Printing: " + t);
       };
       consumer.accept(10);
        List<Integer> list = Arrays.asList(1,4,23,6,3,7,84,3);
        list.forEach(consumer);
        list.forEach(t -> System.out.println("Print: " + t));
    }
}


Predicate

public class PredicateDemo implements Predicate<Integer> {
    @Override
    public boolean test(Integer integer) {
        return integer % 2 == 0;
    }

    public static void main(String[] args) {
        Predicate<Integer> predicate = new PredicateDemo();
        System.out.println(predicate.test(4));
    }
}

lambda expression

public class PredicateDemo{

    public static void main(String[] args) {
        Predicate<Integer> predicate = (t) -> {
            return t % 2 == 0;
        };
        System.out.println(predicate.test(57));
    }
}

public class PredicateDemo{

    public static void main(String[] args) {
        Predicate<Integer> predicate = (t) -> t % 2 == 0;
        System.out.println(predicate.test(64));
    }
}

